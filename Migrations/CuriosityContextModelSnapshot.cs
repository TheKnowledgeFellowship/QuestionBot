// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using QuestionBot;

namespace QuestionBot.Migrations
{
    [DbContext(typeof(CuriosityContext))]
    partial class CuriosityContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");

            modelBuilder.Entity("QuestionBot.Models.Command", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("DiscordPermissionLevel");

                    b.Property<string>("Name");

                    b.Property<int>("StreamerId");

                    b.Property<int?>("TwitchPermissionLevel");

                    b.HasKey("Id");

                    b.HasIndex("StreamerId");

                    b.ToTable("Commands");
                });

            modelBuilder.Entity("QuestionBot.Models.Moderator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordId");

                    b.Property<int>("StreamerId");

                    b.HasKey("Id");

                    b.HasIndex("StreamerId");

                    b.ToTable("Moderators");
                });

            modelBuilder.Entity("QuestionBot.Models.PermittedStreamer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordId");

                    b.HasKey("Id");

                    b.ToTable("PermittedStreamers");
                });

            modelBuilder.Entity("QuestionBot.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Answered");

                    b.Property<string>("Author");

                    b.Property<string>("Content");

                    b.Property<int>("ReadableId");

                    b.Property<int>("StreamerId");

                    b.Property<DateTime>("Time");

                    b.Property<bool>("WhileLive");

                    b.HasKey("Id");

                    b.HasIndex("StreamerId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("QuestionBot.Models.Streamer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("DiscordChannel");

                    b.Property<ulong>("DiscordGuild");

                    b.Property<ulong>("DiscordId");

                    b.Property<int>("QuestionRecognitionMode");

                    b.Property<string>("TwitchChannelName");

                    b.Property<string>("TwitchClientId");

                    b.Property<char>("TwitchCommandPrefix");

                    b.Property<bool>("TwitchModeratorEnabled");

                    b.HasKey("Id");

                    b.ToTable("Streamer");
                });

            modelBuilder.Entity("QuestionBot.Models.Command", b =>
                {
                    b.HasOne("QuestionBot.Models.Streamer", "Streamer")
                        .WithMany()
                        .HasForeignKey("StreamerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuestionBot.Models.Moderator", b =>
                {
                    b.HasOne("QuestionBot.Models.Streamer", "Streamer")
                        .WithMany()
                        .HasForeignKey("StreamerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("QuestionBot.Models.Question", b =>
                {
                    b.HasOne("QuestionBot.Models.Streamer", "Streamer")
                        .WithMany("Questions")
                        .HasForeignKey("StreamerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
